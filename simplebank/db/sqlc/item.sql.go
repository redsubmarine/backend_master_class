// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: item.sql

package db

import (
	"context"
	"database/sql"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (
  name
) VALUES (
  $1
)
RETURNING id, name
`

func (q *Queries) CreateItem(ctx context.Context, name string) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem, name)
	var i Item
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listItems = `-- name: ListItems :many
SELECT id, name
  FROM items
 WHERE (id < $2 OR $2 IS NULL)
 ORDER BY id DESC
 FETCH FIRST $1 ROWS ONLY
`

type ListItemsParams struct {
	Limit int32         `json:"limit"`
	ID    sql.NullInt32 `json:"id"`
}

func (q *Queries) ListItems(ctx context.Context, arg ListItemsParams) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItems, arg.Limit, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
